% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_bootstrap_ci.R
\name{calculate_bootstrap_ci}
\alias{calculate_bootstrap_ci}
\title{Calculate confidence intervals for a dataframe with bootstrap replicates}
\usage{
calculate_bootstrap_ci(
  bootstrap_samples_df,
  grouping_var,
  type = c("perc", "bca", "norm", "basic"),
  conf = 0.95,
  aggregate = TRUE,
  data_cube = NA,
  fun = NA,
  ref_group = NA,
  jackknife = ifelse(is.element("bca", type), "usual", NA),
  progress = FALSE
)
}
\arguments{
\item{bootstrap_samples_df}{A dataframe containing the bootstrap replicates,
where each row represents a bootstrap sample. As returned by
\code{bootstrap_cube()}.}

\item{grouping_var}{A string specifying the grouping variable(s) used for the
bootstrap analysis.
This variable is used to split the dataset into groups for separate
confidence interval calculations.}

\item{type}{A character vector specifying the type(s) of confidence intervals
to compute. Options include:
\itemize{
\item "perc": Percentile interval
\item "bca": Bias-corrected and accelerated interval
\item "norm": Normal interval
\item "basic": Basic interval
\item "all": Compute all available interval types (default)
}}

\item{conf}{A numeric value specifying the confidence level of the intervals.
Default is \code{0.95} (95 \% confidence level).}

\item{aggregate}{Logical. If \code{TRUE} (default), the function returns distinct
confidence limits per group. If \code{FALSE}, the confidence limits are added to
the original bootstrap dataframe \code{bootstrap_samples_df}.}

\item{data_cube}{Only used when \code{type = "bca"}. A data cube object (class
'processed_cube' or 'sim_cube', see \code{b3gbi::process_cube()}) or a dataframe
(from \verb{$data} slot of 'processed_cube' or 'sim_cube'). As used by
\code{bootstrap_cube()}.}

\item{fun}{Only used when \code{type = "bca"}. A function which, when applied to
\code{data_cube} returns the statistic(s) of interest. This function must return a
dataframe with a column \code{diversity_val} containing the statistic of interest.
As used by \code{bootstrap_cube()}.}

\item{ref_group}{Only used when \code{type = "bca"}. A string indicating the
reference group to compare the statistic with. Default is \code{NA}, meaning no
reference group is used.
As used by \code{bootstrap_cube()}.}

\item{jackknife}{Only used when \code{type = "bca"}. A string specifying the
jackknife resampling method for BCa intervals.
\itemize{
\item \code{"usual"}: Negative jackknife (default if BCa is selected).
\item \code{"pos"}: Positive jackknife
}}

\item{progress}{Logical. Whether to show a progress bar for jackknifing. Set
to \code{TRUE} to display a progress bar, \code{FALSE} (default) to suppress it.}
}
\value{
A dataframe containing the bootstrap results with the following
columns:
\itemize{
\item \code{est_original}: The statistic based on the full dataset per group
\item rep_boo
\item \code{est_boot}: The bootstrap estimate (mean of bootstrap replicates per
group)
\item \code{se_boot}: The standard error of the bootstrap estimate (standard
deviation of the bootstrap replicates per group)
\item \code{bias_boot}: The bias of the bootstrap estimate per group
\item \code{int_type}: The interval type
\item \code{ll}: The lower limit of the confidence interval
\item \code{ul}: The upper limit of the confidence interval
\item \code{conf}: The confidence level of the interval
When \code{aggregate = FALSE}, the dataframe contains the columns from
\code{bootstrap_samples_df} with one row per bootstrap replicate.
}
}
\description{
This function calculates confidence intervals for a dataframe containing
bootstrap replicates based on different methods, including percentile
(\code{perc}), bias-corrected and accelerated (\code{bca}), normal (\code{norm}), and basic
(\code{basic}).
}
\examples{
\dontshow{if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Get example data
# install.packages("devtools")
# devtools::install_github("b-cubed-eu/b3gbi")
library(b3gbi)
cube_path <- system.file(
  "extdata", "denmark_mammals_cube_eqdgc.csv",
  package = "b3gbi")
denmark_cube <- process_cube(
  cube_path,
  first_year = 2014,
  last_year = 2020)

# Function to calculate statistic of interest
# Mean observations per year
mean_obs <- function(data) {
  out_df <- aggregate(obs ~ year, data, mean) # Calculate mean obs per year
  names(out_df) <- c("year", "diversity_val") # Rename columns
  return(out_df)
}
mean_obs(denmark_cube$data)

# Perform bootstrapping
bootstrap_mean_obs <- bootstrap_cube(
  data_cube = denmark_cube$data,
  fun = mean_obs,
  grouping_var = "year",
  samples = 1000,
  seed = 123,
  progress = FALSE)
head(bootstrap_mean_obs)

# Calculate confidence limits
# Percentile interval
ci_mean_obs1 <- calculate_bootstrap_ci(
  bootstrap_samples_df = bootstrap_mean_obs,
  grouping_var = "year",
  type = "perc",
  conf = 0.95,
  aggregate = TRUE)
ci_mean_obs1

# All intervals
ci_mean_obs2 <- calculate_bootstrap_ci(
  bootstrap_samples_df = bootstrap_mean_obs,
  grouping_var = "year",
  type = c("perc", "bca", "norm", "basic"),
  conf = 0.95,
  aggregate = TRUE,
  data_cube = denmark_cube$data, # Required for BCa
  fun = mean_obs,                # Required for BCa
  progress = FALSE)
ci_mean_obs2
\dontshow{\}) # examplesIf}
}
